generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum SubscriptionTier {
  BASIC
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique
  firstName          String?
  lastName           String?
  passwordHash       String
  role               Role      @default(USER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isVerified         Boolean   @default(false)
  verifyToken        String?   @unique
  resetToken         String?   @unique
  resetTokenExp      DateTime?
  courses            Course[]  @relation("UserCourses")
  enrollments        Enrollment[]
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String?   @unique
  subscriptionStatus SubscriptionStatus?
  subscriptionTier   SubscriptionTier   @default(BASIC)
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String    @db.ObjectId
  author      User      @relation("UserCourses", fields: [authorId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
}

model Module {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  content     String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
} 